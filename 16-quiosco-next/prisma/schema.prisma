generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// En prisma los modelos se crean en este archivo
// https://www.prisma.io/docs/orm/prisma-schema/data-model/models
// Segun la documentación, los campos se definen de la siguiente manera
// Pulsa TAB para dar un salto de espaciado
// El id se genera con un valor autoincrementable, similar a un key
model Category {
  id    Int       @id   @default(autoincrement())
  name  String 
  slug  String
  products Product[]
}

// Los modelos se añaden al sistema de migraciones de Prisma, con el comando npx prisma migrate dev, luego escribele un nombre en la consola como "categories migration" y genera una carpeta para almacenar las migraciones (migrations) y dentro del archivo migration.sql se encuentra un codigo SQL, tambien sincroniza la base de datos con npx prisma studio, abre un cliente web

// Prisma studio no puede ser hospedado en un servidor de producción porque no es una herramienta Open Source ni es gratuita


// Los campos de tipo numero se define con Int o Float
// Image contiene la dirección de la imagen
// Para establecer una relacion entre Product y Category, primero define la llave foranea con categoryId y luego establece la relacion con el modelo, @relation define una relacion, requiere el nombre del campo y la referencia
// Tambien debes hacer una relacion inversa en Category
model Product {
  id          Int       @id     @default(autoincrement())
  name        String 
  price       Float
  image       String
  categoryId  Int
  category    Category  @relation(fields: [categoryId],references: [id])
  // Relacion de muchos a muchos con orderProducts
  orderItems OrderProducts[]
}

// En la consola, deten prisma studio pulsando CTRL + C y luego ejecuta npx prisma migrate dev para crear otra migración, en este caso lleva el nombre "products_migration"

// Luego ejecuta npx prisma studio para ver los cambios

// Siempre tienes que migrar cada vez que hagas un cambio en la definición de modelos

// Añade los modelos de orden y productos de una orden
// Añade un campo de tipo DateTime, @default sirve para establecer el valor por defecto, now() establece le fecha y hora actual
// El signo ? marca el campo como opcional, puede ser null
model Order{
  id  Int  @id  @default(autoincrement())
  name String
  total Float
  date  DateTime  @default(now())
  status  Boolean @default(false)
  orderReadyAt  DateTime?
  // Relacion de muchos a muchos
  orderProducts OrderProducts[]
}

model OrderProducts {
  id  Int  @id  @default(autoincrement())
  orderId   Int
  order   Order @relation(fields: [orderId], references: [id])
  productId   Int
  product   Product @relation(fields: [productId], references: [id])
}

// En relaciones de muchos a muchos, si se tiene una orden con el id 1 y 3 productos en esa ordenes se tendria lo siguiente
// orderId productId
// 1       1
// 1       2
// 1       3


// No olvidar instalar la extensión de prisma de VSCode para tener el autocompletado

// Ejecuta el comando "npx prisma migrate dev" luego de modificar este archivo "schema.prisma" para crear las migraciones, el nombre de la migración sera "order products". Recordar que debe imprimir "Your Database is now in sync with your schema", luego ejecuta "npx prisma studio" para ver los nuevos modelos creados